# ~/my-project/nginx/nginx.conf

events {
    worker_connections 1024;
}

http {
    client_max_body_size 0;
    server {
        listen 80;
        server_name localhost;
#         server_name skyriv213.site www.skyriv213.site;

        # HTTP 요청을 HTTPS로 리다이렉트
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name localhost;
#         server_name skyriv213.site www.skyriv213.site;

        ssl_certificate /etc/nginx/localhost.crt;
        ssl_certificate_key /etc/nginx/localhost-key.pem;
#         ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
#         ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
#         include /etc/letsencrypt/options-ssl-nginx.conf;
#         ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        location / {
            proxy_pass http://host.docker.internal:8080;  # 로컬에서 실행 중인 Spring Boot로 프록시
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

                        proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_pass_header X-XSRF-TOKEN;

            # Origin 헤더를 클라이언트의 요청 그대로 전달
            proxy_set_header Origin $http_origin;

            # 타임아웃 설정 (WebSocket을 위한 설정)
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }
         # WebSocket 경로에 대한 리버스 프록시 설정
        location /ws {
            proxy_pass http://host.docker.internal:8080/ws;  # Spring Boot WebSocket 엔드포인트로 프록시
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket 통신을 위한 헤더 (업그레이드)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";  # 반드시 "upgrade"로 설정해야 합니다.
            proxy_pass_header X-XSRF-TOKEN;

            # Origin 헤더를 클라이언트의 요청 그대로 전달
            proxy_set_header Origin $http_origin;

            # WebSocket 타임아웃 설정
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
          }
          location /video {
            proxy_pass http://host.docker.internal:8000;  # 로컬에서 실행 중인 Spring Boot로 프록시
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_pass_header X-XSRF-TOKEN;

            # Origin 헤더를 클라이언트의 요청 그대로 전달
            proxy_set_header Origin $http_origin;

            # 타임아웃 설정 (WebSocket을 위한 설정)
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }
    
        }
    
}
